[project]
name = "swarm-multi-agent-langgraph"
version = "0.1.0"
description = "Multi-Agent Swarm System with LangGraph and AWS Bedrock for Dynamic Agent Handoffs"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "langgraph>=0.2.0",
    "langgraph-swarm>=0.0.14",
    "langchain>=0.3.0",
    "langchain-aws>=0.2.0",
    "langchain-huggingface>=0.1.0",
    "langchain-community>=0.3.0",
    "langchain-chroma>=0.1.0",
    "sentence-transformers>=2.2.0",
    "boto3>=1.34.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pydantic>=2.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "aiofiles>=23.0.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    "jinja2>=3.1.0",
    "plotly>=5.17.0",
    "dash>=2.14.0",
    "dash-bootstrap-components>=1.5.0",
    "chromadb>=0.4.0",
    "pypdf>=3.0.0",
    "python-docx>=0.8.11",
    "unstructured>=0.11.0",
    "markdown>=3.5.0",
    "psycopg2-binary>=2.9.10",
    "awscli>=1.42.30",
    "langchain-anthropic>=0.3.20",
    "ragas>=0.1.0",
    "deepeval>=0.20.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "scikit-learn>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0"
]

[project.urls]
Homepage = "https://github.com/your-org/swarm-multi-agent-langgraph"
Documentation = "https://github.com/your-org/swarm-multi-agent-langgraph#readme"
Repository = "https://github.com/your-org/swarm-multi-agent-langgraph.git"
Issues = "https://github.com/your-org/swarm-multi-agent-langgraph/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
